Intro

A lot of what we do as humans is break down complex problems into pieces that can be repeated. This increases efficiency and allows us to focus on more complex problems. 

Iteration helps us deal with these repetitive tasks. 

Iteration in R
R let's you do things in many different ways
Package system allows this to be extended in infinite ways.



For loops
seqalong
apply family
data.table (don't know how to do this, but should show an example)

Tidyverse:purrr:: Map/Walk Family


Steph suggested a read in documents example with map_df
http://data.library.virginia.edu/getting-started-with-the-purrr-package-in-r/
Mix with this your new readtxtfromfolder2() function to import filenames and timestamps as columns

Jenny has a huge purrr site 
https://jennybc.github.io/purrr-tutorial/
Specific page mentioning how you can use the various functions
https://jennybc.github.io/purrr-tutorial/ls03_map-function-syntax.html

What else have I used it for? 
Nested datasets, iterate over them and do stuff.
Iterate over them and plot
iterate over them and print a paragraph about the plot and its data in an RmD



Should mention how you use map, map2, pmap
map = ., map2 = .x;.y, pmap = .1;.2;.3;etc...
This was difficult for me to figure out, spend some time on it. 

Datacamp functional programming...

Dataframe is a list of lists/vector
map() iterates over this list
Show a list that contains numeric vectors first
l = list(a=1:10, b = 10:100)
map(l, function(x) mean(x, na.rm = TRUE))

map can iterate over an atomic vector (simplist case? show first?)
vec <- c(a=2, c= 5)

handy shortcuts listed as a positive, but really only useful if you "get it"
The map functions use the ... ("dot dot dot") argument to pass along additional arguments to .f each time itâ€™s called. For example, we can pass the trim argument to the mean() function:

map_dbl(df, mean, trim = 0.5)
Multiple arguments can be passed along using commas to separate them. For example, we can also pass the na.rm argument to mean():

map_dbl(df, mean, trim = 0.5, na.rm = TRUE)
You don't have to specify the arguments by name, but it is good practice!

You may be wondering why the arguments to map() are .x and .f and not x and f? It's because .x and .f are very unlikely to be argument names you might pass through the ..., thereby preventing confusion about whether an argument belongs to map() or to the function being mapped.

supplying as a formula
~ sum(is.na(.)) The . takes the place of the argument. (I hate this. It's not clear.)




